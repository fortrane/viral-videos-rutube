import os
import ffmpeg
import whisper
import json
import cv2
from datetime import timedelta
from moviepy.editor import TextClip, CompositeVideoClip, VideoFileClip,ImageClip
emoji_image_folder = "app/utils/emodj/"
emoji = {
    "u26A1.png": ["‚ö°Ô∏è", "—Ç—ã", "—ç–Ω–µ—Ä–≥–∏—è", "–º–æ–ª–Ω–∏—è", "—Ä–∞–∑—Ä—è–¥", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ", "–≤—Å–ø—ã—à–∫–∞", "–∑–∞—Ä—è–¥", "—É–¥–∞—Ä", "–∏–º–ø—É–ª—å—Å", "–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å", "—Å–∏–ª–∞", "—à–æ–∫", "–∏—Å–∫—Ä—ã"],
    "u1F525.png": ["üî•", "–æ–≥–æ–Ω—å", "–ø–ª–∞–º—è", "–∂–∞—Ä", "—Ç–µ–ø–ª–æ", "–≥–æ—Ä–µ–Ω–∏–µ", "–∏—Å–∫—Ä–∞", "–ø–æ–∂–∞—Ä", "–≤–æ—Å–ø–ª–∞–º–µ–Ω–µ–Ω–∏–µ", "–≥–æ—Ä–µ—Ç—å", "–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å", "—Å–∂–∏–≥–∞—Ç—å", "—Å—Ç—Ä–∞—Å—Ç—å"],
    "u1F4A7.png": ["üíß", "–≤–æ–¥–∞", "–∫–∞–ø–ª—è", "–≤–ª–∞–≥–∞", "–∂–∏–¥–∫–æ—Å—Ç—å", "–¥–æ–∂–¥—å", "—Ä–æ—Å–∞", "—Å–ª–µ–∑–∞", "–≤–ª–∞–≥–∞", "—É–≤–ª–∞–∂–Ω–µ–Ω–∏–µ", "—á–∏—Å—Ç–æ—Ç–∞", "—Å–≤–µ–∂–µ—Å—Ç—å", "–æ–∫–µ–∞–Ω"],
    "u1F31F.png": ["üåü", "–∑–≤–µ–∑–¥–∞", "—Å–≤–µ—Ç", "—Å–∏—è–Ω–∏–µ", "–±–ª–µ—Å–∫", "–ª—É—á", "–∑–≤—ë–∑–¥–Ω–æ—Å—Ç—å", "–≥–ª–∞–º—É—Ä", "–∏—Å–∫—Ä–∏—Ç—å—Å—è", "—è—Ä–∫–æ—Å—Ç—å", "–æ—Ä–µ–ª", "–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å", "—Ñ–∞–Ω—Ç–∞–∑–∏—è"],
    "u1F32A.png": ["üå™", "–≤–∏—Ö—Ä—å", "—Ç–æ—Ä–Ω–∞–¥–æ", "–±—É—Ä—è", "—à—Ç–æ—Ä–º", "—Å–º–µ—Ä—á", "–≤–µ—Ç–µ—Ä", "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞", "—Ö–∞–æ—Å", "–ø–æ—Ä—ã–≤", "–≤–µ—Ç—Ä–æ–≤–æ–π", "–Ω–µ–∏—Å—Ç–æ–≤—Å—Ç–≤–æ", "—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ"],
    "u1F308.png": ["üåà", "—Ä–∞–¥—É–≥–∞", "—Ü–≤–µ—Ç–∞", "—è—Ä–∫–∏–π", "—Å–≤–µ—Ç", "–ª—É—á–∏", "—Å–ø–µ–∫—Ç—Ä", "–Ω–∞–¥–µ–∂–¥–∞", "–≥–∞—Ä–º–æ–Ω–∏—è", "–∫—Ä–∞—Å–æ—Ç–∞", "–ø–æ–∑–∏—Ç–∏–≤", "—Ä–∞–∑–Ω–æ—Ü–≤–µ—Ç–∏–µ", "–º–µ—á—Ç–∞"],
    "u2744.png": ["‚ùÑÔ∏è", "—Å–Ω–µ–≥", "—Å–Ω–µ–∂–∏–Ω–∫–∞", "—Ö–æ–ª–æ–¥", "–º–æ—Ä–æ–∑", "–ª–µ–¥", "–∑–∏–º–∞", "–∑–∞–º–æ—Ä–æ–∑–∫–∏", "–∏–Ω–µ–π", "–∑–∞—Å–Ω–µ–∂–µ–Ω–Ω—ã–π", "—Å–Ω–µ–≥–æ–ø–∞–¥", "–ª–µ–¥—è–Ω–æ–π", "–º–æ—Ä–æ–∑–Ω—ã–π"],
    "u1F4A1.png": ["üí°", "—Å–≤–µ—Ç", "–ª–∞–º–ø–∞", "–∏–¥–µ—è", "–æ–∑–∞—Ä–µ–Ω–∏–µ", "–æ—Å–≤–µ—â–µ–Ω–∏–µ", "—è—Ä–∫–æ—Å—Ç—å", "–∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ", "–Ω–æ–≤–∞—Ç–æ—Ä—Å—Ç–≤–æ", "–Ω–∞—Ö–æ–¥–∫–∞", "–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ", "–≤–∫–ª—é—á–µ–Ω–∏–µ", "–º—ã—Å–ª—å"],
    "u1F30A.png": ["üåä", "–≤–æ–ª–Ω–∞", "–æ–∫–µ–∞–Ω", "–º–æ—Ä–µ", "–ø—Ä–∏–ª–∏–≤", "—Ç–µ—á–µ–Ω–∏–µ", "–≤–æ–¥–æ–ø–∞–¥", "–≤–æ–¥–Ω–∞—è –≥–ª–∞–¥—å", "—à—Ç–æ—Ä–º", "–ø–æ—Ç–æ–∫", "–≥–ª—É–±–∏–Ω–∞", "–≤–æ–ª–Ω—É—é—â–∏–π", "—Ä–∞–∑–ª–∏–≤"],
    "u1F30D.png": ["üåç", "–∑–µ–º–ª—è", "–ø–ª–∞–Ω–µ—Ç–∞", "–≥–ª–æ–±—É—Å", "–º–∏—Ä", "—ç–∫–æ–ª–æ–≥–∏—è", "–ø—Ä–∏—Ä–æ–¥–∞", "–æ–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä", "–∫–ª–∏–º–∞—Ç", "—ç–∫–æ—Å–∏—Å—Ç–µ–º–∞", "—ç–∫–æ–ª–æ–≥–∏—è", "–º–∞—Ç–µ—Ä–∏–∫", "–∫–æ–Ω—Ç–∏–Ω–µ–Ω—Ç"],
    "u1F31E.png": ["üåû", "—Å–æ–ª–Ω—Ü–µ", "–ª—É—á–∏", "—Å–≤–µ—Ç", "—Ç–µ–ø–ª–æ", "—Å–æ–ª–Ω–µ—á–Ω—ã–π", "—è—Ä–∫–∏–π", "—Ä–∞—Å—Å–≤–µ—Ç", "–∂–∞—Ä", "–¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç", "—Å–≤–µ—Ç–∏–ª–æ", "—Å–æ–ª–Ω–µ—á–Ω–æ—Å—Ç—å", "–ª–µ—Ç–æ"],
    "u1F343.png": ["üçÉ", "–ª–∏—Å—Ç—å—è", "–ø—Ä–∏—Ä–æ–¥–∞", "–∑–µ–ª–µ–Ω—å", "—Ä–∞—Å—Ç–µ–Ω–∏–µ", "–≤–µ—Ç–µ—Ä–æ–∫", "–¥–µ—Ä–µ–≤–æ", "—Ñ–ª–æ—Ä–∞", "—ç–∫–æ–ª–æ–≥–∏—á–Ω–æ—Å—Ç—å", "—Å–≤–µ–∂–µ—Å—Ç—å", "–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–≤–µ—Ç–µ—Ä", "—ç–∫–æ—Å–∏—Å—Ç–µ–º–∞"],
    "u23F0.png": ["‚è∞", "–≤—Ä–µ–º—è", "–±—É–¥–∏–ª—å–Ω–∏–∫", "—á–∞—Å—ã", "—Ç–∞–π–º–µ—Ä", "—Å–µ–∫—É–Ω–¥—ã", "–º–∏–Ω—É—Ç—ã", "—Å—Ä–æ–∫", "—Ç–æ—á–Ω–æ—Å—Ç—å", "–¥–µ–¥–ª–∞–π–Ω", "–∂–¥–∞—Ç—å", "–ø—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å", "–ø–æ—Å–ø–µ—à–∏—Ç—å"],
    "u1F680.png": ["üöÄ", "—Ä–∞–∫–µ—Ç–∞", "–∫–æ—Å–º–æ—Å", "–≤–∑–ª–µ—Ç", "—Å–∫–æ—Ä–æ—Å—Ç—å", "–ø–æ–ª—ë—Ç", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å", "–º–∏—Å—Å–∏—è", "–æ—Ä–±–∏—Ç–∞", "–∑–≤—ë–∑–¥—ã", "—É—Å–∫–æ—Ä–µ–Ω–∏–µ", "–∫–æ—Å–º–æ–¥—Ä–æ–º", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è"],
    "u1F3C6.png": ["üèÜ", "–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö","–ø–æ–±–µ–¥–∏–º", "—Ç—Ä–æ—Ñ–µ–π", "–ø–æ–±–µ–¥–∞", "–Ω–∞–≥—Ä–∞–¥–∞", "—É—Å–ø–µ—Ö", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", "—á–µ–º–ø–∏–æ–Ω", "–∫—É–±–æ–∫", "–ª–∏–¥–µ—Ä—Å—Ç–≤–æ", "—Ç—Ä–∏—É–º—Ñ", "–≥–µ—Ä–æ–π", "–ø—Ä–∏–∑–Ω–∞–Ω–∏–µ", "—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ"],
    "u1F3AF.png": ["üéØ", "—Ü–µ–ª—å", "–º–∏—à–µ–Ω—å", "—Ñ–æ–∫—É—Å", "—É—Å–ø–µ—Ö", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ", "–º–µ—Ç–∫–æ—Å—Ç—å", "–ø–æ–ø–∞–¥–∞–Ω–∏–µ", "–Ω–∞–º–µ—Ä–µ–Ω–∏–µ", "–ø–ª–∞–Ω", "–ø—Ä–∏—Ü–µ–ª", "—Ç–æ—á–Ω–æ—Å—Ç—å", "–∑–∞–¥–∞—á–∞"],
    "u1F389.png": ["üéâ", "–ø—Ä–∞–∑–¥–Ω–∏–∫", "—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ", "—Ä–∞–¥–æ—Å—Ç—å", "–≤–µ—á–µ—Ä–∏–Ω–∫–∞", "—É–≤–µ—Å–µ–ª–µ–Ω–∏–µ", "—Å–∞–ª—é—Ç", "—Ñ–µ–π–µ—Ä–≤–µ—Ä–∫", "–æ—Ç–¥—ã—Ö", "—è—Ä–∫–æ—Å—Ç—å", "–∑–∞–±–∞–≤–∞", "—Ç–æ—Ä–∂–µ—Å—Ç–≤–æ", "—Å–æ–±—ã—Ç–∏–µ"],
    "u2764.png": ["‚ù§Ô∏è", "–ª—é–±–æ–≤—å", "—Å–µ—Ä–¥—Ü–µ", "—á—É–≤—Å—Ç–≤–æ", "–ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å", "—Å–∏–º–ø–∞—Ç–∏—è", "—Ä–æ–º–∞–Ω—Ç–∏–∫–∞", "—Å—Ç—Ä–∞—Å—Ç—å", "–≤–ª—é–±–ª—ë–Ω–Ω–æ—Å—Ç—å", "—Å–µ—Ä–¥–µ—á–Ω–æ—Å—Ç—å", "–∑–∞–±–æ—Ç–∞", "—ç–º–æ—Ü–∏–∏", "–Ω–µ–∂–Ω–æ—Å—Ç—å"],
    "u1F60E.png": ["üòé", "–∫—Ä—É—Ç–æ", "—Å—Ç–∏–ª—å", "—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "—Ö–∞—Ä–∏–∑–º–∞", "–º–æ–¥–∞", "—Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ—Å—Ç—å", "–∫—Ä—É—Ç–æ–π", "–±–µ–∑–∑–∞–±–æ—Ç–Ω–æ—Å—Ç—å", "–ø—Ä–æ—Ö–ª–∞–¥–∞", "—Å–º–µ–ª–æ—Å—Ç—å", "–æ—Ç–¥—ã—Ö", "—à–∏–∫"],
    "u1F916.png": ["ü§ñ", "—Ä–æ–±–æ—Ç", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–º–µ—Ö–∞–Ω–∏–∫–∞", "–∞–≤—Ç–æ–º–∞—Ç", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", "–±—É–¥—É—â–µ–µ", "–º–∞—à–∏–Ω–∞", "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–∫–∏–±–µ—Ä"],
    "u1F6A8.png": ["üö®", "—Ç—Ä–µ–≤–æ–≥–∞", "—Å–∏–≥–Ω–∞–ª", "–∞–≤–∞—Ä–∏—è", "–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ø–æ–ª–∏—Ü–∏—è", "—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ", "—Å–∏—Ä–µ–Ω–∞", "–∫—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç", "–≤–Ω–∏–º–∞–Ω–∏–µ", "—á—Ä–µ–∑–≤—ã—á–∞–π–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è", "—ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ"],
    "u1F4A3.png": ["üí£", "–±–æ–º–±–∞", "–≤–∑—Ä—ã–≤", "–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞", "—Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ", "–≤–∑—Ä—ã–≤–æ–æ–ø–∞—Å–Ω—ã–π", "–¥–µ—Ç–æ–Ω–∞—Ü–∏—è", "—à–æ–∫", "–∫—Ä–∏–∑–∏—Å", "—Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π", "–∫–∞—Ç–∞–∫–ª–∏–∑–º", "—Ç—Ä–∞–≥–µ–¥–∏—è"],
    "u1F4C8.png": ["üìà", "—Ä–æ—Å—Ç", "—É—Å–ø–µ—Ö", "–ø—Ä–æ–≥—Ä–µ—Å—Å", "–≥—Ä–∞—Ñ–∏–∫", "—É–≤–µ–ª–∏—á–µ–Ω–∏–µ", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "–ø–æ–¥—ä—ë–º", "—Ä–∞–∑–≤–∏—Ç–∏–µ", "—Ñ–∏–Ω–∞–Ω—Å—ã", "—Ç—Ä–µ–Ω–¥", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"],
    "u1F3B5.png": ["üéµ", "–º—É–∑—ã–∫–∞", "–º–µ–ª–æ–¥–∏—è", "–∑–≤—É–∫", "—Ä–∏—Ç–º", "–ø–µ—Å–Ω—è", "–Ω–æ—Ç–∫–∞", "–∫–æ–º–ø–æ–∑–∏—Ü–∏—è", "–∑–≤—É—á–∞–Ω–∏–µ", "–≥–∞—Ä–º–æ–Ω–∏—è", "–º—É–∑—ã–∫–∞–ª—å–Ω—ã–π", "–ø–µ–≤–µ—Ü", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç"],
    "u1F451.png": ["üëë", "–∫–æ—Ä–æ–Ω–∞", "–∫–æ—Ä–æ–ª—å", "–≤–ª–∞—Å—Ç—å", "–ª–∏–¥–µ—Ä—Å—Ç–≤–æ", "–∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç", "–≤–µ–ª–∏—á–∏–µ", "–º–æ–Ω–∞—Ä—Ö", "–ø—Ä–µ—Å—Ç–∏–∂", "—Å—Ç–∞—Ç—É—Å", "—Ç—Ä–æ–Ω", "–≥–æ—Å–ø–æ–¥—Å—Ç–≤–æ", "—Å–ª–∞–≤–∞"],
    "u1F9E0.png": ["üß†", "–º–æ–∑–≥", "—É–º", "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–º—ã—à–ª–µ–Ω–∏–µ", "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç—å", "–ª–æ–≥–∏–∫–∞", "–∞–Ω–∞–ª–∏–∑", "—Ä–∞–∑—É–º", "–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å", "–∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å", "—Ä–µ—à–µ–Ω–∏–µ"],
    "u1F3AC.png": ["üé¨", "–∫–∏–Ω–æ", "—Å—ä—ë–º–∫–∞", "—Ä–µ–∂–∏—Å—Å—É—Ä–∞", "–∫–∞–¥—Ä", "—Ñ–∏–ª—å–º", "–∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ", "–≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫", "–∫–∞–º–µ—Ä–∞", "—Å—Ü–µ–Ω–∞", "–º–æ–Ω—Ç–∞–∂", "–∫–∏–Ω–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "—Ä–µ–∂–∏—Å—Å—ë—Ä"],
    "u1F47E.png": ["üëæ", "–∏–≥—Ä–∞", "–ø—Ä–∏—à–µ–ª–µ—Ü", "–≤–∏—Ä—É—Å", "–≤–∏–¥–µ–æ–∏–≥—Ä—ã", "–∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç", "–º–æ–Ω—Å—Ç—Ä", "–≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π", "–≥–µ–π–º–∏–Ω–≥", "–≤—Ä–∞–∂–¥–µ–±–Ω—ã–π", "—Ü–∏—Ñ—Ä–æ–≤–æ–π", "–≥–µ–π–º–µ—Ä", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"],
    "u1F465.png": ["üë•", "–ª—é–¥–∏", "–≥—Ä—É–ø–ø–∞", "–≤–º–µ—Å—Ç–µ", "–¥—Ä—É–∑—å—è", "–∫–æ–ª–ª–µ–∫—Ç–∏–≤", "–æ–±—â–µ—Å—Ç–≤–æ", "–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ", "—Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ", "–∫–æ–º–∞–Ω–¥–∞", "—Å–æ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å"],
    "u1F464.png": ["üë§", "—á–µ–ª–æ–≤–µ–∫", "–ø–µ—Ä—Å–æ–Ω–∞", "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å", "–ª–∏—á–Ω–æ—Å—Ç—å", "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", "–æ–¥–∏–Ω–æ—á–∫–∞", "–ø—Ä–æ—Ñ–∏–ª—å", "–∏–¥–µ–Ω—Ç–∏—á–Ω–æ—Å—Ç—å", "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ"],
    "u1F46A.png": ["üë™", "—Å–µ–º—å—è", "—Ä–æ–¥–∏—Ç–µ–ª–∏", "–¥–µ—Ç–∏", "—Å–≤—è–∑—å", "–±–ª–∏–∑–∫–∏–µ", "–ª—é–±–æ–≤—å", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞", "–µ–¥–∏–Ω—Å—Ç–≤–æ", "–¥–æ–º–∞", "–æ–±—â–µ–Ω–∏–µ"],
    "u1F914.png": ["ü§î", "–¥—É–º–∞—é", "–∑–∞–¥—É–º—á–∏–≤–æ—Å—Ç—å", "–≤–æ–ø—Ä–æ—Å", "–º—ã—Å–ª—å", "—Å–æ–º–Ω–µ–Ω–∏–µ", "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ", "–Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–∑–∞–≥–∞–¥–∫–∞", "–∏–¥–µ–∏", "—Ä–µ—Ñ–ª–µ–∫—Å–∏—è", "–∞–Ω–∞–ª–∏–∑"],
    "u1F929.png": ["ü§©", "–≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ", "—Å—É–ø–µ—Ä", "—É–¥–∏–≤–ª–µ–Ω–∏–µ", "–≤–æ—Å—Ç–æ—Ä–≥", "—ç–∫—Å—Ç–∞–∑", "—Ä–∞–¥–æ—Å—Ç—å", "—É—Å–ø–µ—Ö", "–±–ª–µ—Å–∫", "–ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å", "–∑–≤—ë–∑–¥—ã", "—Å—á–∞—Å—Ç—å–µ"],
    "u1F631.png": ["üò±", "—Å—Ç—Ä–∞—Ö", "—É–∂–∞—Å", "–ø–∞–Ω–∏–∫–∞", "—à–æ–∫", "–∏—Å–ø—É–≥", "–∫—Ä–∏–∫", "–≤–æ–ª–Ω–µ–Ω–∏–µ", "—Å—é—Ä–ø—Ä–∏–∑", "–ø—É–≥–∞—é—â–µ", "–Ω–∞–ø—Ä—è–∂—ë–Ω–Ω–æ—Å—Ç—å", "–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞"],
    "u1F440.png": ["üëÄ", "–≥–ª–∞–∑–∞", "–≤–Ω–∏–º–∞–Ω–∏–µ", "–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ", "–≤–∑–æ—Ä", "—Å–º–æ—Ç—Ä—é", "—É–≤–∏–¥–µ—Ç—å", "—Ñ–æ–∫—É—Å", "–≤–∑–≥–ª—è–¥",
                   "–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å"],
    "u1F48E.png": ["üíé", "–±—Ä–∏–ª–ª–∏–∞–Ω—Ç", "–¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å", "—Å–æ–∫—Ä–æ–≤–∏—â–µ", "—Ü–µ–Ω–Ω–æ—Å—Ç—å", "–∫—Ä–∞—Å–æ—Ç–∞", "—à–∏–∫", "—Ä–æ—Å–∫–æ—à—å", "–±–æ–≥–∞—Ç—Å—Ç–≤–æ",
                   "—ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å", "–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"],
    "u1F98B.png": ["ü¶ã", "–±–∞–±–æ—á–∫–∞", "–∫—Ä–∞—Å–æ—Ç–∞", "–ª—ë–≥–∫–æ—Å—Ç—å", "–ø—Ä–∏—Ä–æ–¥–∞", "–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–∏–∑—è—â–µ—Å—Ç–≤–æ", "–º–µ—Ç–∞–º–æ—Ä—Ñ–æ–∑–∞",
                   "—Ü–≤–µ—Ç–µ–Ω–∏–µ", "—Å–≤–æ–±–æ–¥–∞"],
    "u1F340.png": ["üçÄ", "—É–¥–∞—á–∞", "–∫–ª–µ–≤–µ—Ä", "—Å—á–∞—Å—Ç—å–µ", "–≤–µ–∑–µ–Ω–∏–µ", "–Ω–∞–¥–µ–∂–¥–∞", "–±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "—Å—É–¥—å–±–∞",
                   "—á–µ—Ç—ã—Ä–µ—Ö–ª–∏—Å—Ç–Ω–∏–∫"],
    "u1F4A2.png": ["üí¢", "–≥–Ω–µ–≤", "—è—Ä–æ—Å—Ç—å", "–Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ", "—ç–º–æ—Ü–∏–∏", "–∑–ª–æ—Å—Ç—å", "–Ω–µ–≥–æ–¥–æ–≤–∞–Ω–∏–µ", "–∞–≥—Ä–µ—Å—Å–∏—è", "–±—É—Ä—è",
                   "–≤–∑—Ä—ã–≤ —ç–º–æ—Ü–∏–π"],
    "u1F6A5.png": ["üö•", "—Å–≤–µ—Ç–æ—Ñ–æ—Ä", "–¥–æ—Ä–æ–≥–∞", "–ø—Ä–∞–≤–∏–ª–∞", "–æ—Å—Ç–∞–Ω–æ–≤–∫–∞", "–¥–≤–∏–∂–µ–Ω–∏–µ", "—Ç—Ä–∞—Ñ–∏–∫", "—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ",
                   "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ø—É—Ç—å"],
    "u1F47D.png": ["üëΩ", "–ø—Ä–∏—à–µ–ª–µ—Ü", "–∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∏–Ω", "–∫–æ—Å–º–æ—Å", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "–≤–Ω–µ–∑–µ–º–Ω–æ–π",
                   "–Ω–∞—É—á–Ω–∞—è —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ", "–∞–Ω–æ–º–∞–ª–∏—è"],

}


def detect_faces(video_path):
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

    cap = cv2.VideoCapture(video_path)
    face_count = 0

    while cap.isOpened():
        ret, frame = cap.read()
        if not ret:
            break

        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.1, 4)
        face_count = max(face_count, len(faces))

    cap.release()
    return face_count
def process_video_with_subtitles(videofilename,title,thumbnail_name, output_filename="output.mp4",new_subscription=None):
    current_directory = os.getcwd()
    print(current_directory,videofilename,os.path.exists(videofilename))
    if new_subscription==None:
        audiofilename = videofilename.replace(".mp4", ".mp3")
        input_stream = ffmpeg.input(videofilename)
        audio = input_stream.audio
        output_stream = ffmpeg.output(audio, audiofilename)
        output_stream = ffmpeg.overwrite_output(output_stream)
        ffmpeg.run(output_stream)

        model = whisper.load_model("medium")
        result = model.transcribe(audiofilename, word_timestamps=True)

        wordlevel_info = []
        for each in result['segments']:
            words = each['words']
            for word in words:
                wordlevel_info.append({
                    'word': word['word'].strip(),
                    'start': word['start'],
                    'end': word['end']
                })

    else:
        wordlevel_info=new_subscription


    subtitles_text = " ".join(
        word['word'].strip() for segment in result['segments'] for word in segment['words']
    )

    with open('data.json', 'w') as f:
        json.dump(wordlevel_info, f, indent=4)

    with open('data.json', 'r') as f:
        wordlevel_info_modified = json.load(f)

    linelevel_subtitles = split_text_into_lines(wordlevel_info_modified)

    input_video = VideoFileClip(videofilename)
    frame_size = input_video.size
    all_linelevel_splits = []

    for line in linelevel_subtitles:
        out = create_caption(line, frame_size,title=title)
        all_linelevel_splits.extend(out)

    final_video = CompositeVideoClip([input_video] + all_linelevel_splits)

    final_video = final_video.set_audio(input_video.audio)

    final_video.write_videofile(output_filename, fps=24, codec="libx264", audio_codec="aac")
    #first_frame_img = thumbnail_name
    #final_video.save_frame(first_frame_img, t=0)
    video_duration_seconds = final_video.duration


    video_duration_str = str(timedelta(seconds=video_duration_seconds))[
                         :-7]

    return [video_duration_str,wordlevel_info,subtitles_text]

def create_caption(textJSON, framesize, font="Roboto-Bold", fontsizee=23, color='white', bgcolor='blue',title=None):
    full_duration = textJSON['end'] - textJSON['start']
    fontsize=framesize[0]//20
    word_clips = []
    xy_textclips_positions = []

    x_pos = 100
    y_pos = 500
    frame_width = framesize[0]
    frame_height = framesize[1]
    x_buffer = frame_width * 1 / 40
    y_buffer = frame_height * 1 / 20

    if title:
        title_clip = TextClip(title, font=font, fontsize=fontsize * 2, color='black', bg_color='white')
        title_clip = title_clip.set_duration(2).set_position('center').resize(width=frame_width//2)
        word_clips.append(title_clip)

    for index, wordJSON in enumerate(textJSON['textcontents']):
        word = wordJSON['word'].lower()
        duration = wordJSON['end'] - wordJSON['start']
        word_clip = TextClip(wordJSON['word'], font=font, fontsize=fontsize, color=color).set_start(
            textJSON['start']).set_duration(full_duration)
        word_clip_space = TextClip(" ", font=font, fontsize=fontsize, color=color).set_start(
            textJSON['start']).set_duration(full_duration)
        word_width, word_height = word_clip.size
        space_width, space_height = word_clip_space.size
        if x_pos + word_width + space_width > frame_width - 2 * x_buffer:

            x_pos = 0
            y_pos = y_pos + word_height + 40


            xy_textclips_positions.append({
                "x_pos": x_pos + x_buffer,
                "y_pos": y_pos + y_buffer,
                "width": word_width,
                "height": word_height,
                "word": wordJSON['word'],
                "start": wordJSON['start'],
                "end": wordJSON['end'],
                "duration": duration
            })

            word_clip = word_clip.set_position((x_pos + x_buffer, y_pos + y_buffer))
            word_clip_space = word_clip_space.set_position((x_pos + word_width + x_buffer, y_pos + y_buffer))
            x_pos = word_width + space_width
        else:

            xy_textclips_positions.append({
                "x_pos": x_pos + x_buffer,
                "y_pos": y_pos + y_buffer,
                "width": word_width,
                "height": word_height,
                "word": wordJSON['word'],
                "start": wordJSON['start'],
                "end": wordJSON['end'],
                "duration": duration
            })

            word_clip = word_clip.set_position((x_pos + x_buffer, y_pos + y_buffer))
            word_clip_space = word_clip_space.set_position((x_pos + word_width + x_buffer, y_pos + y_buffer))

            x_pos = x_pos + word_width + space_width

        word_clips.append(word_clip)
        word_clips.append(word_clip_space)

        #print(f"–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ: {frame_width}x{frame_height}")

        for emodji, words_list in emoji.items():
            if word in words_list:
                #print("–≠–º–æ–¥–∑–∏ –Ω–∞–π–¥–µ–Ω–æ:", emodji)
                try:

                    emoji_image_path = f"{emoji_image_folder}{emodji}"
                    #print(emoji_image_path)


                    emoji_clip = ImageClip(emoji_image_path).set_start(wordJSON['start']).set_duration(duration + 2).resize(0.4)

                    start_x = -emoji_clip.w  # –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —ç–∫—Ä–∞–Ω–∞ —Å–ª–µ–≤–∞)
                    center_x = (frame_width - emoji_clip.w) / 2  # –¶–µ–Ω—Ç—Ä —ç–∫—Ä–∞–Ω–∞
                    end_x = frame_width  # –ö–æ–Ω–µ—á–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è (–∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —ç–∫—Ä–∞–Ω–∞ —Å–ø—Ä–∞–≤–∞)


                    quick_move_duration = 0.1  # –í—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —ç–º–æ–¥–∑–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
                    stay_duration = 0.3 # –í—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —ç–º–æ–¥–∑–∏ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –≤ —Ü–µ–Ω—Ç—Ä–µ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
                    return_move_duration = 0.1  # –í—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ —ç–º–æ–¥–∑–∏ –≤–µ—Ä–Ω–µ—Ç—Å—è –æ–±—Ä–∞—Ç–Ω–æ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

                    # –û–±—â–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
                    total_duration = quick_move_duration + stay_duration + return_move_duration

                    # –ê–Ω–∏–º–∞—Ü–∏—è: –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏
                    emoji_clip = emoji_clip.set_position(lambda t: (
                        start_x + (center_x - start_x) * (t / quick_move_duration) if t < quick_move_duration else
                        center_x if t < quick_move_duration + stay_duration else
                        center_x + (end_x - center_x) * (
                                    (t - (quick_move_duration + stay_duration)) / return_move_duration)
                        , 450))
                    emoji_clip = emoji_clip.set_duration(total_duration)

                    word_clips.append(emoji_clip)

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–º–æ–¥–∑–∏ –∫–ª–∏–ø–∞: {e}")

    for highlight_word in xy_textclips_positions:
        word_clip_highlight = TextClip(highlight_word['word'], font=font, fontsize=fontsize, color=color,
                                       bg_color=bgcolor).set_start(highlight_word['start']).set_duration(
            highlight_word['duration'])
        word_clip_highlight = word_clip_highlight.set_position((highlight_word['x_pos'], highlight_word['y_pos']))
        word_clips.append(word_clip_highlight)

    return word_clips

def split_text_into_lines(data):
    MaxChars = 40
    MaxDuration = 0.5
    MaxGap = 0.3

    subtitles = []
    line = []
    line_duration = 0

    for idx, word_data in enumerate(data):
        start = word_data["start"]
        end = word_data["end"]

        line.append(word_data)
        line_duration += end - start

        temp = " ".join(item["word"] for item in line)
        new_line_chars = len(temp)
        duration_exceeded = line_duration > MaxDuration
        chars_exceeded = new_line_chars > MaxChars
        maxgap_exceeded = (idx > 0) and (word_data['start'] - data[idx - 1]['end'] > MaxGap)

        if duration_exceeded or chars_exceeded or maxgap_exceeded:
            if line:
                subtitle_line = {
                    "word": " ".join(item["word"] for item in line),
                    "start": line[0]["start"],
                    "end": line[-1]["end"],
                    "textcontents": line
                }
                subtitles.append(subtitle_line)
                line = []
                line_duration = 0

    if line:
        subtitle_line = {
            "word": " ".join(item["word"] for item in line),
            "start": line[0]["start"],
            "end": line[-1]["end"],
            "textcontents": line
        }
        subtitles.append(subtitle_line)

    return subtitles